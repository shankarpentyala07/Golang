1.Compile Go
The Go compiler takes a Go source file with a .go extension, processes it and produces an executable file without any extension. To compile a Go source file, test.go, type at the command line:

$ go build test.go
This will produce an executable file, test. To run test, type in the command line:
 
$ ./test

2. Running Files in Go
The Go compiler can execute Go code from the source file without producing an executable file. Instead of build, use run. To do this, type the following in the command line:
$ go run exampleFile.go
The go run command compiles the code (like go build) and executes it. Unlike go build, go run will NOT create an executable file in our current folder.

3. Packages in Go
A Go package is a directory made up of a collection of Go source files that are compiled together. This collection of reusable code typically contains functions related to a specific topic or concept. To use code from a particular package, we simply import it into our Go source file.

For example, to import the fmt package which contains functions for formatting input and output strings, we type the keyword import followed by the package name.
import "fmt"

4.Import Multiple Packages
To import multiple packages in a Go file, use the import keyword followed by the package name enclosed in double-quotes and repeat this statement for every imported package on its own line, or write a single import keyword to import multiple packages, one per line, in enclosed parentheses, (…).

import "fmt"
import "math"
import "time"

or

import (
  "fmt"
  "math"
  "time"
)

5. main package , main function

Normally when we write functions, you need to write code to invoke them, otherwise they are unused. However, the main function is different if it resides in the main package.When we have a main function in the main package, this is special to Go. When compiled, an executable is produced, and when run, the executable uses the main function as the starting point.

package main

import "fmt"

func main(){
  fmt.Println("Hello World")
}

6. Package Aliases
We can also provide an alias to a package by specifying an alias name before the package name.

import (
  p1 "package1"
  "package2"
)

In the example above we’ve aliased package1 as p1 and now we can call functions from package1 by using p1 like:
p1.SampleFunc()

Instead of:
package1.SampleFunc() 

package main

import (
  "fmt"
  t "time"
)

func main() {
  fmt.Println("Hello World")
  fmt.Println(t.Now())
}
Note: the time printed will be UTC time zone.

7. Go Comments
Comments are useful for documentation in a Go file and are ignored by the compiler. There are two types of comments:

-> a single-lined comment is preceded by a double forward slash, //, and ends at the end of the line.
-> a multi-lined comment begins with /* followed by one or more lines of comments and ends with */

// one line comment
/*
  this comment
  is on multiple lines
  and ends here
*/

8. Go Doc
Go includes a program go doc for extracting and viewing documentation from .go files. For information about a package, use the command go doc followed by the package name.

go doc fmt 

For information about a package function, use the command go doc followed by the package name, a period then the function name.

go doc fmt.Println


9. Datatypes:

 In Go, there are seven fundamental data types: Numbers, Strings, Booleans, Arrays, Structs, Slices, and Pointers.


a) Numbers
In Go, any number is regarded as number, but there are three sub-categories:

Integers (signed and unsigned)
Floating-point numbers
Complex numbers
Integers
Integers are number-types that are either:

Signed (int) integers that can be positive or negative.
Unsigned (uint) integers ranging from 0 to positive infinity.
Each integer value comes in 4 different memory sizes.

8-bit: int8/uint8
16-bit: int16/uint16
32-bit: int32/uint32
64-bit: int64/uint64
32- or 64-bit based on system architecture: int/uint
Synonym for int32: rune
synonym for int8: byte
Floating-Point Numbers
Floating-point numbers can contain a decimal point. There are two different sizes.

32-bit: float32
64-bit: float64
Complex Numbers
Complex numbers are composed of a real number and an imaginary number. The real number is either a float. There are two different sizes:

32-bit float + imaginary number: complex64
64-bit float + imaginary number: complex128
// Initialize with complex() taking 2 arguments: a float and a complex number
var complex complex64 = complex(1, 2) // Equals 1 + 2i

Variables can also be initialized with a shorthand:

complex := 1 + 2i

b) Strings
A string represents a sequence of characters. Strings are immutable; once they are created they can’t be modified.

var s string
s = "Hello, World!"

c) Booleans
A boolean can hold one of two possible values, either true or false.

var isValid bool
isValid = true
isValid = false

d) Arrays 
Arrays are list with static capacity. They can’t change their capacity after the declaration.
// Declare and initialize an arraz of capacity 5 and fill it with elements
someArray := [5]int{0, 2, 3, 4, 5}

e)Slices
Slices can change their capacity dynamically even after their declaration. Under the hood a slice references an array. If the array changes, so does the slice.
// Copy the elements from index 0 until (excluding) index 3 into a slace
var slice []int = someArary[0:3]

f)Structs
In Go, a struct is a more complex type that can contain custom fields. It’s similar to an object in JavaScript or a dictionary in Python. The fields of a struct can be accessed with a dot .

// Declaration with "type ... struct" keywords
type Box struct {
  X int
  Y int
 }

Structs are initialized by:
1. Referencing the name of the struct
2. Passing zero, any or all of the fields of the struct.
The fields without a value will be initialized with zero-values by default.

// Initialization
b := Box{1, 2}

g) Pointers
Pointers contain the memory address of the variable they are based on. Pointers used *.
// Declaration of a pointer with *
var p *int

someInteger := 42
// Create pointer from variable using "&"
p = &someInteger


10. constants:
We use the const keyword to create a constant. We immediately assign a value to the constant using a literal.

const funFact = "Hummingbirds' wings can beat up to 200 times a second."
fmt.Println("Did you know?")
fmt.Println(funFact)

Constants have names without spaces: spaces aren’t allowed! This means that for us to have descriptive names (and it is important to have descriptive names so that we can read the code we’ve written) we need to use camelCase or PascalCase, capitalizing each subsequent word instead of adding spaces.


11. Different verbs:
a) The verb %T prints out the type of the second argument
specialNum := 42
fmt.Printf("This value's type is %T.", specialNum)
// Prints: This value's type is int.

b) Using %d we can interpolate a number into a string
votingAge := 18
fmt.Printf("You must be %d years old to vote.", votingAge)

c) With %f, we can limit how precise we are by including a value between the % and f like: %.2f. If we include this in our code:
gpa := 3.8
fmt.Printf("You're averaging: %.2f.", gpa)

d)The %v portion is our placeholder and is known as a verb in Go. Verbs are identified by the combination of a % character followed by a letter. The specific letter informs what fills in the placeholder, in this case, %v gets the value of "C" from our second argument, guess.

guess := "C"
fmt.Printf("Is %v your final answer?", guess)
// Prints: Is C your final answer?

12. Getting user Inputs:
Another helpful method from the fmt package is .Scan() which allows us to get user input! Let’s see an example of this in action:

fmt.Println("How are you doing?") 

var response string 
fmt.Scan(&response)

fmt.Printf("I'm %v.", response) 

fmt.Scan() expects addresses for arguments, hence the &



13. Scoped Short Declaration Statement:
We can also include a short variable declaration before we provide a condition in either if or switch statements. Here’s the syntax:
1.
x := 8
y := 9
if product := x * y; product > 60 {
  fmt.Println(product, "  is greater than 60")
}

In our if statement, we first declare product. Notice that product is separated from the condition using a semi-colon ;. We can also have a short variable declaration inside a switch statement:

2.
switch season := "summer" ; season {
case "summer":
  fmt.Println("Go out and enjoy the sun!")
}

3. 
switch hour := time.Now().Hour() ; hour {
case 5:
    fmt.Println("It's go time.")
default:
    fmt.Println("It's 5 o'clock somewhere.")
}
One thing to keep in mind when using the short variable declaration in if or switch statements is that the declared variable is scoped to the statement blocks.


14. Randomizing:

import (
  "math/rand"
  "fmt"
)

func main() {
  fmt.Println(rand.Intn(100))
}


In our main function, we’re printing out a random number using rand and the Intn() method. With the argument of 100, the maximum value that the method will return is 99. Looking at the entire line fmt.Println(rand.Intn(100)), it should print a random integer from 0 to 99. However, if we run our program multiple times, we’ll find that it always prints 81.

Previously, we saw how our random numbers weren’t entirely random. The reason for this behavior is due to how Go seeds or chooses a number as a starting point for generating random numbers. By default, the seed value is 1

We can provide a new seed value using the method rand.Seed() and passing in an integer.

However, we encounter the same problem if we pass in a constant, i.e. pass in 5. Each time we run our program, we’ll always print the same set of numbers. Therefore, each time we run our program, we also need a unique number as a seed. One way to get this unique number each time we run our program is to use time. The reason why we can use time to be our unique number is because it’s always a different time when our program is run! Take for example:

package main

import (
  "fmt"
  "math/rand"
  "time"
)

func main() {
  rand.Seed(time.Now().UnixNano())
  fmt.Println(rand.Intn(100))
}

In the example above, we import the time library. We then use the time library and call .Now() with the .UnixNano() method chained to it. This results in the difference in time (in nanoseconds) since Janurary 1st, 1970 UTC. 

The number that we get from time.Now().UnixNano() is passed as an argument to rand.Seed() resulting in a different seed value each time we run our program. Since each run has a unique seed value, each run will also print out a random number from 0 to 99.

package main

import (
	"fmt"
  "math/rand"
  "time"
)

func main() {
	// Add your code below:
  
  rand.Seed(time.Now().UnixNano())
  amountLeft := rand.Intn(10000)
  
  fmt.Println("amountLeft is: ", amountLeft)
  
	if amountLeft > 5000 {
		fmt.Println("What should I spend this on?")
  } else {
    fmt.Println("Where did all my money go?")
  }
}

15. defer

We can delay a function call to the end of the current scope by using the defer keyword. defer tells Go to run a function, but at the end of the current function. This is useful for logging, file writing, and other utilities.

Example: We need to be disconnecting from the database that we’re connecting to to get our cool information! Use defer to call disconnectDatabase() every time queryDatabase() finishes running.

package main
import "fmt"

func queryDatabase(query string) string {
  var result string
  connectDatabase()
  // Add deferred call to disconnectDatabase() here
  defer disconnectDatabase()
  
  if query == "SELECT * FROM coolTable;" {
    result = "NAME|DOB\nVincent Van Gogh|March 30, 1853"
  }  
  fmt.Println(result)
  return result
}

func connectDatabase() {
  fmt.Println("Connecting to the database.")
}

func disconnectDatabase() {
  fmt.Println("Disconnecting from the database.")
}

func main() {
  queryDatabase("SELECT * FROM coolTable;")
}



