1.
package main

import (
	"fmt"
	"testing"
)

// solution ////////////////////////////////////////

func isValid(s string) bool {
	pairs := map[rune]rune{
		'(': ')',
		'{': '}',
		'[': ']',
	}
	stack := []rune{}

	for _, r := range s {
		if _, ok := pairs[r]; ok {
			stack = append(stack, r)
		} else if len(stack) == 0 || pairs[stack[len(stack)-1]] != r {
			return false
		} else {
			stack = stack[:len(stack)-1]
		}
	}

	return len(stack) == 0
}

// tests ///////////////////////////////////////////

var (
	tests = []struct {
		s    string
		want bool
	}{
		{"()", true},
		{"()[]{}", true},
		{"(]", false},
		{"([)]", false},
		{"{[]}", true},
		{"]", false},
	}
	funcs = []func(s string) bool{isValid}
)


func TestIsValid(t *testing.T) {
	for _, fn := range funcs {
		for _, test := range tests {
			test := test
			t.Run(fmt.Sprint(test.s, test.want), func(t *testing.T) {
				t.Parallel()
				if have := fn(test.s); have != test.want {
					t.Errorf(`
want: %+v
have: %+v`, test.want, have)
				}
			})
		}
	}
}


2.
